{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataReduxForm","reduxForm","form","profile","handleSubmit","error","onSubmit","className","styles","formSummaryError","Field","name","component","Input","placeholder","validate","required","type","TextArea","Object","keys","contacts","map","key","ProfileData","isOwner","toEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","k","contactTitle","contactValue","Contact","ProfileInfo","Preloader","s","descriptionBlock","src","photos","large","usersPhoto","mainPhoto","photoFile","target","files","length","savePhoto","initialValues","formData","saveProfile","then","Post","item","message","MyPosts","React","memo","console","log","postsElements","posts","reverse","p","id","postsBlock","AppNewPostFormRedux","values","addPost","newPostText","maxLength10","maxLengthCreator","connect","state","profilePage","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","Component","compose","auth","isAuth","updatePhoto","saveProfileTC","withRouter"],"mappings":"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","file":"static/js/3.01311bce.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3jH7U\",\"mainPhoto\":\"ProfileInfo_mainPhoto__zep-E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2BKOl\",\"posts\":\"MyPosts_posts__1eCCo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__4dWza\"};","import React, {ChangeEvent, useState, useEffect} from \"react\";\r\n\r\n\r\ntype ProfileStatusWithHooksPropType = {\r\n    status: string\r\n    editMode?: boolean\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusWithHooksPropType) => {\r\n\r\n     let [editMode, setEditMode]  = useState(false);\r\n     let [status, setStatus]  = useState(props.status);\r\n\r\n     useEffect(() => {\r\n         setStatus(props.status);\r\n     }, [props.status])\r\n\r\n     const activateEditMode = () => {\r\n         setEditMode(true);\r\n     }\r\n\r\n     const deactivateEditMode = () => {\r\n         setEditMode(false);\r\n         props.updateStatus(status);\r\n     }\r\n\r\n     const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n         setStatus(e.currentTarget.value);\r\n     }\r\n\r\n        return (\r\n            <div>\r\n                { !editMode &&\r\n                <div>\r\n                    <b>Status: </b> <span onDoubleClick={activateEditMode}> {props.status || \"-------\"} </span>\r\n                </div>\r\n                }\r\n                { editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status} />\r\n                </div>\r\n                }\r\n            </div>\r\n\r\n        )\r\n\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport {UserProfileType} from \"../../../redux/profile-reducer\";\r\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\r\nimport {Input, TextArea} from \"../../common/FormsControls/FormsControls\";\r\nimport styles from  '../../common/FormsControls/FormsControls.module.css';\r\nimport {required} from \"../../../utils/validators/validators\";\r\n\r\n\r\ntype ProfileDataFormType = {\r\n    profile: UserProfileType\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<UserProfileType, ProfileDataFormType> & ProfileDataFormType>  = (props) => {\r\n    const {profile, handleSubmit, error} = props;\r\n    return (\r\n    <form onSubmit={handleSubmit}>\r\n        <div>\r\n            <button> Save</button>\r\n            {error && <div className={styles.formSummaryError}>{error}</div>}\r\n            <div>\r\n                Your name : <Field name={'fullName'} component={Input} placeholder={'Full Name'} validate={[required]}\r\n            />\r\n            </div>\r\n            <div>\r\n                Looking for a job? <Field name={'lookingForAJob'} component='input' type='checkbox'\r\n            />\r\n            </div>\r\n            <div>\r\n                Skills : <Field name={'lookingForAJobDescription'} component={TextArea}\r\n            />\r\n            </div>\r\n            <div>\r\n                About Me: <Field name={'aboutMe'} component={TextArea}\r\n            />\r\n            </div>\r\n            <div>\r\n                <b>Contacts :</b> {Object.keys(profile.contacts).map(key => {\r\n                return <div key={key}>\r\n                    <div>{key} :</div>\r\n                    <Field name={'contacts.' + key} component='input'/>\r\n                </div>\r\n            })\r\n            }\r\n            </div>\r\n        </div>\r\n    </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataReduxForm = reduxForm<UserProfileType, ProfileDataFormType>({form: 'edit-profile'})(ProfileDataForm)\r\nexport default ProfileDataReduxForm;","import {contactsType, UserProfileType} from \"../../../redux/profile-reducer\";\r\nimport React from \"react\";\r\n\r\ntype ProfileDataType = {\r\n    profile: UserProfileType\r\n    isOwner: boolean\r\n    toEditMode: () => void\r\n}\r\n\r\nexport const ProfileData  = (props: ProfileDataType) => {\r\n    const {profile, isOwner, toEditMode} = props;\r\n    return (\r\n    <div>\r\n        {isOwner && <div><button onClick={toEditMode}>edit</button></div>}\r\n        <div><b>Full Name: </b>{profile.fullName}</div>\r\n        <div><b>Looking for a job: </b>{profile.lookingForAJob ? \"no\" : \"yes\"}</div>\r\n        {profile.lookingForAJob &&\r\n        <div><b>My professional skills: </b>{profile.lookingForAJobDescription}</div>\r\n        }\r\n        <div><b>About me: </b>{profile.aboutMe}</div>\r\n        <div><b>Contacts: </b>{Object.keys(profile.contacts).map((k) => {\r\n            return <Contact key={k} contactTitle={k}\r\n                            contactValue={props.profile.contacts[k as keyof contactsType]}/>\r\n        })}\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\ntype ContactType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\nexport const Contact = (props: ContactType) => {\r\n    return <div>{props.contactTitle} : {props.contactValue}</div>\r\n}\r\n","import React, {useState} from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport {UserProfileType} from \"../../../redux/profile-reducer\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport usersPhoto from \"../../../assets/images/user.png\";\r\nimport ProfileDataReduxForm from \"./ProfileDataForm\";\r\nimport {ProfileData} from \"./ProfileData\";\r\n\r\ntype ProfileInfoType = {\r\n    profile: UserProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: UserProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const mainPhotoSelected = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const photoFile = e.target.files;\r\n        if (photoFile && photoFile.length) {\r\n            props.savePhoto(photoFile[0])\r\n        }\r\n    }\r\n\r\n    const toEditMode = () => setEditMode(true)\r\n\r\n    const onSubmit = (formData: UserProfileType) => {\r\n        props.saveProfile(formData).then(() => setEditMode(false))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.large || usersPhoto} className={s.mainPhoto}\r\n                />\r\n                {props.isOwner && <input type=\"file\" onChange={mainPhotoSelected}/>}\r\n\r\n                {editMode\r\n                    ? <ProfileDataReduxForm initialValues={props.profile} profile={props.profile} onSubmit={onSubmit} />\r\n                    : <ProfileData toEditMode={toEditMode}\r\n                                   profile={props.profile}\r\n                                   isOwner={props.isOwner}\r\n                    />}\r\n\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport s from './Post.module.css';\r\n\r\ntype PostType = {\r\n    message: string\r\n}\r\n\r\nexport const Post = (props: PostType) => {\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src='https://fiverr-res.cloudinary.com/images/t_main1,q_auto,f_auto,q_auto,f_auto/gigs/104113705/original/6076831db34315e45bd2a31a9d79bb7b91d48e04/design-flat-style-minimalist-avatar-of-you.jpg'/>\r\n            {props.message}\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport s from './MyPosts.module.css';\r\nimport {Post} from './Post/Post';\r\nimport {PostsPropType} from '../../../redux/profile-reducer'\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {TextArea} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\nexport type PostsTypeArray = {\r\n    posts: Array<PostsPropType>\r\n   // newPostText: string\r\n   // updateNewPostText: (newText: string) => void\r\n    addPost: (message: string) => void\r\n}\r\n\r\ntype PostFormDataType = {\r\n    newPostText: string\r\n}\r\n\r\n// componentDidUpdate(prevProps: Readonly<PostsTypeArray>, prevState: Readonly<{}>, snapshot?: any) {\r\n//     console.log('RENDER')\r\n// }\r\n//\r\n// componentDidMount() {\r\n//     setTimeout(() => {\r\n//      this.setState({a: 12});\r\n//     }, 3000)\r\n// }\r\n//\r\n// shouldComponentUpdate(nextProps: Readonly<PostsTypeArray>, nextState: Readonly<{}>, nextContext: any): boolean {\r\n//     return nextProps != this.props || nextState != this.state;\r\n// }    inside component MyPosts\r\n\r\nexport const MyPosts = React.memo((props: PostsTypeArray) => {\r\n\r\n    console.log('RENDER YO')\r\n\r\n    const postsElements =\r\n        [...props.posts]\r\n        .reverse()\r\n        .map(p => {\r\n        return <Post key={p.id} message={p.message}/>\r\n\r\n    })\r\n\r\n    let onAddPost = (values: PostFormDataType) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AppNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}> {postsElements}</div>\r\n        </div>\r\n    )\r\n\r\n});\r\n\r\nconst maxLength10 =  maxLengthCreator(10);\r\n\r\nconst AppNewPostForm: React.FC<InjectedFormProps<PostFormDataType>> = (props) => {\r\n\r\n\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={TextArea} name={\"newPostText\"}\r\n                       placeholder='Your new post' validate={[required, maxLength10]}/>\r\n            </div>\r\n            <button>Add post</button>\r\n        </form>\r\n    )\r\n}\r\nconst AppNewPostFormRedux = reduxForm<PostFormDataType>({form: \"profileAppNewPostForm\"})(AppNewPostForm)","import React from \"react\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {\r\n    addPost,\r\n    PostsPropType,\r\n} from \"../../../redux/profile-reducer\";\r\n\r\ntype MapStateType = {\r\n    posts: Array<PostsPropType>\r\n}\r\ntype MapDispatchType = {\r\n    addPost: (message: string) => void\r\n  //  updateNewPostText: (newText: string) => void\r\n}\r\ntype OwnerType = {}\r\ntype PropsType = OwnerType & MapStateType & MapDispatchType\r\n\r\nconst MyPostsContainer = (props: PropsType) => {\r\n\r\n    const {posts, addPost} = props\r\n\r\n    return (\r\n        <MyPosts\r\n            posts={posts}\r\n           // newPostText={newPostText}\r\n         //   updateNewPostText={updateNewPostText}\r\n            addPost={addPost}/>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\n// const mapDispatchToProps = (dispatch: any) => {\r\n//     return (message: string) => {dispatch(actions.addPostActionCreator(message))}\r\n//\r\n// }\r\n\r\n\r\nexport default connect<MapStateType, MapDispatchType, OwnerType, AppStateType>(mapStateToProps, {\r\n    addPost\r\n})(MyPostsContainer)","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {UserProfileType} from \"../../redux/profile-reducer\";\r\nimport style from './Profile.module.css'\r\n\r\n\r\nexport type ProfilePropsType = {\r\n    profile: UserProfileType  | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profi: UserProfileType) => Promise<any>\r\n}\r\n\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         savePhoto={props.savePhoto}\r\n                         saveProfile={props.saveProfile}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getStatus,\r\n    getUserProfile,\r\n    saveProfileTC,\r\n    updatePhoto,\r\n    updateStatus,\r\n    UserProfileType\r\n} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from 'react-router';\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype MapStateType = {\r\n    profile: UserProfileType  | null\r\n    status: string\r\n    authorizedUserId: any  //number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchType = {\r\n    getUserProfile: (userId: number | null) => void\r\n    getStatus: (userId: number | null) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profi: UserProfileType) => Promise<any>\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n\r\n}\r\ntype OwnPropsType = MapDispatchType & MapStateType\r\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n        }\r\n        if (!userId) {\r\n            this.props.history.push(\"/login\")\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>) {\r\n\r\n        if (this.props.match.params.userId != prevProps.match.params.userId)\r\n            this.refreshProfile();\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                         isOwner={!this.props.match.params.userId}\r\n                         savePhoto={this.props.savePhoto}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}\r\n                         saveProfile={this.props.saveProfile}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {    //<MapStateType, MapDispatchType, {}, AppStateType>\r\n        getUserProfile,\r\n        getStatus,\r\n        updateStatus,\r\n        savePhoto: updatePhoto,\r\n        saveProfile: saveProfileTC,\r\n    }),\r\n    withRouter,\r\n)(ProfileContainer)"],"sourceRoot":""}