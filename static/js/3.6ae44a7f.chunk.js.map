{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","Preloader","className","s","descriptionBlock","src","photos","large","usersPhoto","mainPhoto","isOwner","type","photoFile","target","files","length","savePhoto","Post","item","message","MyPosts","React","memo","console","log","postsElements","posts","reverse","map","p","key","id","postsBlock","AppNewPostFormRedux","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","TextArea","name","placeholder","validate","required","connect","state","profilePage","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","Component","compose","auth","isAuth","updatePhoto","withRouter"],"mappings":"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","file":"static/js/3.6ae44a7f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3jH7U\",\"mainPhoto\":\"ProfileInfo_mainPhoto__zep-E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2BKOl\",\"posts\":\"MyPosts_posts__1eCCo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__4dWza\"};","import React, {ChangeEvent, useState, useEffect} from \"react\";\r\n\r\n\r\ntype ProfileStatusWithHooksPropType = {\r\n    status: string\r\n    editMode?: boolean\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusWithHooksPropType) => {\r\n\r\n     let [editMode, setEditMode]  = useState(false);\r\n     let [status, setStatus]  = useState(props.status);\r\n\r\n     useEffect(() => {\r\n         setStatus(props.status);\r\n     }, [props.status])\r\n\r\n     const activateEditMode = () => {\r\n         setEditMode(true);\r\n     }\r\n\r\n     const deactivateEditMode = () => {\r\n         setEditMode(false);\r\n         props.updateStatus(status);\r\n     }\r\n\r\n     const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n         setStatus(e.currentTarget.value);\r\n     }\r\n\r\n        return (\r\n            <div>\r\n                { !editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}> {props.status || \"-------\"} </span>\r\n                </div>\r\n                }\r\n                { editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status} />\r\n                </div>\r\n                }\r\n            </div>\r\n\r\n        )\r\n\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React, {useState} from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport {UserProfileType} from \"../../../redux/profile-reducer\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport usersPhoto from \"../../../assets/images/user.png\";\r\n\r\ntype ProfileInfoType = {\r\n    profile: UserProfileType  | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const mainPhotoSelected = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const photoFile = e.target.files;\r\n        if (photoFile && photoFile.length) {\r\n            props.savePhoto(photoFile[0])\r\n        }\r\n    }\r\n\r\n    const toEditMode = () => setEditMode(true)\r\n\r\n    return (\r\n        <div>\r\n            {/*<div>*/}\r\n            {/*    <img src='https://www.pbs.org/wgbh/nova/media/images/sting-ray-city-grand-cayman-1.width-800.jpg'/>*/}\r\n            {/*</div>*/}\r\n            <div className={s.descriptionBlock}>\r\n                {/*<img src={props.profile.photos.large ? props.profile.photos.large :photo }/>*/}\r\n                <img src={props.profile.photos.large || usersPhoto} className={s.mainPhoto}/>\r\n                {props.isOwner && <input type=\"file\" onChange={mainPhotoSelected}/>}\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport s from './Post.module.css';\r\n\r\ntype PostType = {\r\n    message: string\r\n}\r\n\r\nexport const Post = (props: PostType) => {\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src='https://fiverr-res.cloudinary.com/images/t_main1,q_auto,f_auto,q_auto,f_auto/gigs/104113705/original/6076831db34315e45bd2a31a9d79bb7b91d48e04/design-flat-style-minimalist-avatar-of-you.jpg'/>\r\n            {props.message}\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport s from './MyPosts.module.css';\r\nimport {Post} from './Post/Post';\r\nimport {PostsPropType} from '../../../redux/profile-reducer'\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {TextArea} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\nexport type PostsTypeArray = {\r\n    posts: Array<PostsPropType>\r\n   // newPostText: string\r\n   // updateNewPostText: (newText: string) => void\r\n    addPost: (message: string) => void\r\n}\r\n\r\ntype PostFormDataType = {\r\n    newPostText: string\r\n}\r\n\r\n// componentDidUpdate(prevProps: Readonly<PostsTypeArray>, prevState: Readonly<{}>, snapshot?: any) {\r\n//     console.log('RENDER')\r\n// }\r\n//\r\n// componentDidMount() {\r\n//     setTimeout(() => {\r\n//      this.setState({a: 12});\r\n//     }, 3000)\r\n// }\r\n//\r\n// shouldComponentUpdate(nextProps: Readonly<PostsTypeArray>, nextState: Readonly<{}>, nextContext: any): boolean {\r\n//     return nextProps != this.props || nextState != this.state;\r\n// }    inside component MyPosts\r\n\r\nexport const MyPosts = React.memo((props: PostsTypeArray) => {\r\n\r\n    console.log('RENDER YO')\r\n\r\n    const postsElements =\r\n        [...props.posts]\r\n        .reverse()\r\n        .map(p => {\r\n        return <Post key={p.id} message={p.message}/>\r\n\r\n    })\r\n\r\n    let onAddPost = (values: PostFormDataType) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AppNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}> {postsElements}</div>\r\n        </div>\r\n    )\r\n\r\n});\r\n\r\nconst maxLength10 =  maxLengthCreator(10);\r\n\r\nconst AppNewPostForm: React.FC<InjectedFormProps<PostFormDataType>> = (props) => {\r\n\r\n\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={TextArea} name={\"newPostText\"}\r\n                       placeholder='Your new post' validate={[required, maxLength10]}/>\r\n            </div>\r\n            <button>Add post</button>\r\n        </form>\r\n    )\r\n}\r\nconst AppNewPostFormRedux = reduxForm<PostFormDataType>({form: \"profileAppNewPostForm\"})(AppNewPostForm)","import React from \"react\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {\r\n    addPost,\r\n    PostsPropType,\r\n} from \"../../../redux/profile-reducer\";\r\n\r\ntype MapStateType = {\r\n    posts: Array<PostsPropType>\r\n}\r\ntype MapDispatchType = {\r\n    addPost: (message: string) => void\r\n  //  updateNewPostText: (newText: string) => void\r\n}\r\ntype OwnerType = {}\r\ntype PropsType = OwnerType & MapStateType & MapDispatchType\r\n\r\nconst MyPostsContainer = (props: PropsType) => {\r\n\r\n    const {posts, addPost} = props\r\n\r\n    return (\r\n        <MyPosts\r\n            posts={posts}\r\n           // newPostText={newPostText}\r\n         //   updateNewPostText={updateNewPostText}\r\n            addPost={addPost}/>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\n// const mapDispatchToProps = (dispatch: any) => {\r\n//     return (message: string) => {dispatch(actions.addPostActionCreator(message))}\r\n//\r\n// }\r\n\r\n\r\nexport default connect<MapStateType, MapDispatchType, OwnerType, AppStateType>(mapStateToProps, {\r\n    addPost\r\n})(MyPostsContainer)","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {UserProfileType} from \"../../redux/profile-reducer\";\r\n\r\n\r\nexport type ProfilePropsType = {\r\n    profile: UserProfileType  | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n\r\n}\r\n\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         savePhoto={props.savePhoto}\r\n            />\r\n            <MyPostsContainer/>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getStatus,\r\n    getUserProfile,\r\n    updatePhoto,\r\n    updateStatus,\r\n    UserProfileType\r\n} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from 'react-router';\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype MapStateType = {\r\n    profile: UserProfileType  | null\r\n    status: string\r\n    authorizedUserId: any\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n\r\n}\r\ntype OwnPropsType = MapDispatchType & MapStateType\r\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n        }\r\n        if (!userId) {\r\n            this.props.history.push(\"/login\")\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>) {\r\n\r\n        if (this.props.match.params.userId != prevProps.match.params.userId)\r\n            this.refreshProfile();\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                         isOwner={!this.props.match.params.userId}\r\n                         savePhoto={this.props.savePhoto}\r\n\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStateType, MapDispatchType, {}, AppStateType>(mapStateToProps, {\r\n        getUserProfile,\r\n        getStatus,\r\n        updateStatus,\r\n        savePhoto: updatePhoto,\r\n    }),\r\n    withRouter,\r\n)(ProfileContainer)"],"sourceRoot":""}