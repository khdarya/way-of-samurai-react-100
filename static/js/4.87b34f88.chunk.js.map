{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","Message","props","className","s","message","DialogItem","path","id","dialog","active","to","name","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","validate","required","placeholder","Dialogs","messages","sendMessage","dialogs","addMessage","map","m","key","dialogsItems","values","newMessageText","mapStateToPropsForRedirect","state","isAuth","auth","DialogsContainer","compose","connect","dialogsPage","actions","sendMessageActionCreator","Component","RedirectComponent","this","React"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,+HCMrKC,EAAU,SAACC,GACpB,OAAO,yBAAKC,UAAWC,IAAEC,SAAlB,IAA6BH,EAAMG,U,QCCjCC,EAAa,SAACJ,GACvB,IAAIK,EAAO,YAAcL,EAAMM,GAC/B,OAAO,yBAAKL,UAAWC,IAAEK,OAAS,IAAML,IAAEM,QACtC,kBAAC,IAAD,CAASC,GAAIJ,GAAOL,EAAMU,Q,kCC8C5BC,EAAcC,YAAiB,IAe/BC,EAAsBC,YAA+B,CAACC,KAAM,wBAAtCD,EAb6C,SAACd,GACtE,OACA,0BAAMgB,SAAUhB,EAAMiB,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IACXC,SAAU,CAACC,IAAUX,GACrBD,KAAK,iBAAiBa,YAAY,wBAE7C,6BAAK,oDAOEC,EApDC,SAACxB,GAA6B,IAEnCyB,EAAoCzB,EAApCyB,SAAWC,EAAyB1B,EAAzB0B,YAAcC,EAAW3B,EAAX2B,QAE1BC,EAAaH,EAASI,KAAI,SAAAC,GAC5B,OAAO,kBAAC,EAAD,CAASC,IAAKD,EAAExB,GAAIH,QAAS2B,EAAE3B,aAc1C,OACI,yBAAKF,UAAWC,IAAEyB,SACd,yBAAK1B,UAAWC,IAAE8B,cAEjBL,EAAQE,KAAI,SAAAF,GAAO,OAAI,kBAAC,EAAD,CAAYI,IAAKJ,EAAQrB,GAAII,KAAMiB,EAAQjB,KAAMJ,GAAIqB,EAAQrB,SAGrF,yBAAKL,UAAWC,IAAEuB,UACd,6BAAMG,GACN,kBAACf,EAAD,CAAqBG,SAbb,SAACiB,GACjBP,EAAYO,EAAOC,sB,wDC7BvBC,EAA6B,SAACC,GAAD,MAA0B,CACvDC,OAAQD,EAAME,KAAKD,S,OCWVE,EAAmB,SAACvC,GAAsB,IAE5CyB,EAAqCzB,EAArCyB,SAAUC,EAA2B1B,EAA3B0B,YAAgBC,EAAW3B,EAAX2B,QAEjC,OACI,kBAAC,EAAD,CACIF,SAAUA,EAEVC,YAAaA,EAEbC,QAASA,KAcNa,sBACXC,aAToB,SAACL,GACrB,MAAO,CAEHX,SAAUW,EAAMM,YAAYjB,SAC5BE,QAASS,EAAMM,YAAYf,WAKkD,CAC7ED,YAAaiB,IAAQC,4BDlCG,SAACC,GAAoB,IAE3CC,EAF0C,uKAIxC,OAAKC,KAAK/C,MAAMqC,OACT,kBAACQ,EAAcE,KAAK/C,OADI,kBAAC,IAAD,CAAUS,GAAI,eAJL,GAEhBuC,IAAMH,WAOtC,OAAOJ,YAAQN,EAARM,CAAoCK,KCuBhCN,CAMbD","file":"static/js/4.87b34f88.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1gs0i\",\"dialogsItems\":\"Dialogs_dialogsItems__gvDhF\",\"active\":\"Dialogs_active__2p8To\",\"messages\":\"Dialogs_messages__1BH5V\",\"message\":\"Dialogs_message__2IZ6R\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\ntype MessageType = {\r\n    message: string\r\n}\r\n\r\nexport const Message = (props: MessageType) => {\r\n    return <div className={s.message}> {props.message}\r\n    </div>\r\n\r\n}\r\n","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nexport const DialogItem = (props: DialogItemType) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport {DialogsPropType, MessagesPropType} from \"../../redux/dialogs-reducer\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\r\nimport {TextArea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\n\r\nexport type DialogsPropsType = {\r\n    messages: Array<MessagesPropType>\r\n //   newMessageText: string\r\n    sendMessage: (message: string) => void\r\n //   updateNewMessageBody: (newMessageText: string) => void\r\n\r\n    dialogs: Array<DialogsPropType>\r\n}\r\n\r\ntype MessageFormDataType = {\r\n    newMessageText: string\r\n}\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n\r\n    const {messages,  sendMessage,  dialogs} = props\r\n\r\n    const addMessage = messages.map(m => {\r\n        return <Message key={m.id} message={m.message} />\r\n    })\r\n\r\n    // const addMessageHandler = () => {\r\n    //     sendMessage(newMessageText)\r\n    // }\r\n    // const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    //     updateNewMessageBody(e.currentTarget.value)\r\n    // }\r\n\r\n    let addNewMessage = (values: MessageFormDataType) => {\r\n        sendMessage(values.newMessageText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {\r\n             dialogs.map(dialogs => <DialogItem key={dialogs.id} name={dialogs.name} id={dialogs.id}/>)\r\n                }\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{addMessage}</div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage} />\r\n        </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<MessageFormDataType>> = (props) => {\r\n    return (\r\n    <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field component={TextArea}\r\n                   validate={[required, maxLength50]}\r\n                   name=\"newMessageText\" placeholder='Enter your message'/>\r\n        </div>\r\n        <div><button>Add message</button></div>\r\n    </form>\r\n)\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<MessageFormDataType>({form: \"dialogAddMessageForm\"})(AddMessageForm)\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\ntype RedirectComponentType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component: any) => {\r\n\r\n    class RedirectComponent extends React.Component<RedirectComponentType> {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={\"/login\"}/>\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n};","import React from 'react';\r\nimport Dialogs from \"./Dialogs\";\r\nimport {DialogsPropType, MessagesPropType} from \"../../redux/dialogs-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {actions} from \"../../redux/dialogs-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype MapStateType = {\r\n  //  newMessageText: string\r\n    messages: Array<MessagesPropType>\r\n    dialogs: Array<DialogsPropType>\r\n}\r\ntype MapDispatchType = {\r\n    sendMessage: (message: string) => void\r\n  //  updateNewMessageBody: (newMessageText: string) => void\r\n}\r\ntype OwnerType = {}\r\ntype PropsType = OwnerType & MapDispatchType & MapStateType\r\n\r\nexport const DialogsContainer = (props: PropsType) => {\r\n\r\n    const {messages, sendMessage,    dialogs} = props\r\n\r\n    return (\r\n        <Dialogs\r\n            messages={messages}\r\n            //newMessageText={newMessageText}\r\n            sendMessage={sendMessage}\r\n           // updateNewMessageBody={updateNewMessageBody}\r\n            dialogs={dialogs}\r\n\r\n        />\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateType => {\r\n    return {\r\n\r\n        messages: state.dialogsPage.messages,\r\n        dialogs: state.dialogsPage.dialogs,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStateType, MapDispatchType, OwnerType, AppStateType>(mapStateToProps, {\r\n        sendMessage: actions.sendMessageActionCreator\r\n\r\n    }),\r\n    withAuthRedirect\r\n)(DialogsContainer)\r\n\r\n// export default connect<MapStateType, MapDispatchType, OwnerType, AppStateType>(mapStateToProps, {\r\n//     sendMessage: actions.sendMessageActionCreator,\r\n//     updateNewMessageBody: actions.updateNewMessageBodyActionCreator\r\n// })(AuthRedirectComponent)"],"sourceRoot":""}