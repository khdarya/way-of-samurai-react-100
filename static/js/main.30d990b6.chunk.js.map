{"version":3,"sources":["assets/images/user.png","api/api.ts","redux/dialogs-reducer.ts","components/Users/Users.module.css","assets/images/preloader.svg","components/Navbar/Navbar.module.css","components/Navbar/Navbar.tsx","redux/users-reducer.ts","components/common/Paginator/Paginator.tsx","components/Users/Users.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/Header/Header.tsx","redux/auth-reducer.ts","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","redux/app-reducer.ts","redux/redux-store.ts","App.tsx","hoc/withSuspense.tsx","serviceWorker.ts","index.tsx","components/common/FormsControls/FormsControls.module.css","components/common/Paginator/Paginator.module.css","components/common/Preloader/Preloader.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","components/Header/Header.module.css","redux/profile-reducer.ts"],"names":["module","exports","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","userId","post","unfollow","delete","getProfile","console","warn","profileAPI","getStatus","updateStatus","status","put","updatePhoto","photoFile","formData","FormData","append","authAPI","me","login","email","password","rememberMe","logout","initialState","dialogs","id","name","messages","message","actions","sendMessageActionCreator","text","type","dialogsReducer","state","action","newMessage","Date","getTime","Navbar","className","s","nav","item","to","activeClassName","activeLink","users","totalUsersCount","isFetching","followingInProgress","fake","followSuccess","unfollowSuccess","setCurrentPage","toggleIsFetching","toggleFollowingProgress","followUnfollow","dispatch","apiMethod","actionCreator","a","resultCode","usersReducer","map","u","followed","filter","Paginator","props","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","nameClass","p","styles","pageNumber","selectedPage","paginator","onClick","key","e","paginator_btn","Users","src","photos","small","usersPhoto","userPhoto","disabled","some","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","this","Preloader","React","Component","compose","connect","bind","page","items","totalCount","Header","header","loginBlock","isAuth","setAuthUserData","payload","getAuthUserData","authReducer","HeaderContainer","auth","LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","Field","placeholder","validate","required","component","Input","style","formSummaryError","length","stopSubmit","_error","initialized","appReducer","rootReducer","combineReducers","profilePage","profileReducer","dialogsPage","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","DialogsContainer","lazy","ProfileContainer","App","initializeApp","path","render","Suspense","fallback","AppContainer","withRouter","SamuraiTSApp","Boolean","window","location","hostname","match","h1","document","createElement","innerHTML","querySelector","appendChild","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","preloader","TextArea","input","meta","hasError","touched","formControl","value","maxLengthCreator","maxLength","posts","likesCount","profile","addPost","setStatus","getUserProfile","file","newPost","postId"],"mappings":"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","file":"static/js/main.30d990b6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/user.5eaf6836.png\";","import axios from \"axios\";\r\nimport {UserProfilePhotosType} from \"../redux/profile-reducer\";\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"979d9ce7-5a57-44f9-9b9c-37da1881885c\"\r\n    }\r\n});\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`,).then(response => {\r\n            return response.data;\r\n        });\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n\r\n    getProfile(userId: number) {\r\n        console.warn('Obsolete method. Please use profileAPI object ')\r\n        return profileAPI.getProfile(userId);\r\n\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n\r\n    getProfile(userId: number) {\r\n        return instance.get(`profile/` + userId);\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get(`profile/status/` + userId);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status`, { status: status});\r\n    },\r\n    updatePhoto(photoFile: File) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile);\r\n        return instance.put<ResponseType<UpdatePhotoResDataType>>(`profile/photo`, formData)\r\n            .then(response => response.data)\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`);\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe});\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    },\r\n}\r\n\r\ntype UpdatePhotoResDataType = { photos: UserProfilePhotosType }\r\n\r\nexport type ResponseType<D = {}> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: 0 | 1 | 10\r\n}\r\n\r\n","import {InferActionsTypes} from \"./redux-store\";\r\n\r\nexport type DialogsPropType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport type MessagesPropType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych'},\r\n        {id: 2, name: 'Andrey'},\r\n        {id: 3, name: 'Sveta'},\r\n        {id: 4, name: 'Sasha'},\r\n        {id: 5, name: 'Viktor'},\r\n        {id: 6, name: 'Valera'}\r\n    ] as Array<DialogsPropType>,\r\n    messages: [\r\n        {id: 1, message: 'Hi, how are you?'},\r\n        {id: 2, message: 'How is your IT'},\r\n        {id: 3, message: 'Yo'},\r\n        {id: 4, message: 'Yo'},\r\n        {id: 5, message: 'Yo'}\r\n    ] as Array<MessagesPropType>,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SEND-MESSAGE': {\r\n            let newMessage = {\r\n                id: new Date().getTime(),\r\n                message: action.text\r\n            };\r\n            return {...state,\r\n                messages: [newMessage, ...state.messages]}\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\nexport const actions = {\r\n    sendMessageActionCreator: (text: string) => ({type: 'SEND-MESSAGE', text} as const),\r\n   // updateNewMessageBodyActionCreator: (newMessageText: string) => ({type: 'UPDATE-NEW-MESSAGE-BODY', newMessageText} as const)\r\n}\r\n\r\nexport default dialogsReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__1m2iX\",\"selectedPage\":\"Users_selectedPage__J4Xec\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.27fc27b6.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3terb\",\"item\":\"Navbar_item__3-vLz\",\"activeLink\":\"Navbar_activeLink__2KqzE\"};","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\">News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\">Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/settings\">Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import {usersAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst FOLLOW = 'FOLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET-USERS';\r\nconst SET_CURRENT_PAGE = \"SET-CURRENT-PAGE\";\r\nconst SET_TOTAL_USERS_COUNT = \"SET-TOTAL-USERS-COUNT\";\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE-IS-FETCHING\";\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = \"TOGGLE-IS-FOLLOWING-PROGRESS\";\r\nconst FAKE = \"FAKE\"\r\n\r\nexport type UsersPropType = {\r\n    id: number\r\n    avatar: string\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    location: locationType\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\ntype locationType = {\r\n    city: string\r\n    country: string\r\n}\r\n\r\nlet initialState = {\r\n    users: [] as Array<UsersPropType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<any>,\r\n    fake: 10\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n//type ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\n\r\nconst usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case FAKE:\r\n            return {...state, fake: state.fake + 1}\r\n\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n\r\n        case SET_USERS: {\r\n            return {...state, users: action.users}\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\ntype ActionsType = FollowActionType | UnfollowActionType\r\n    | SetUsersActionType | SetCurrentPageActionType\r\n    | SetTotalUsersCountActionType\r\n    | ToggleIsFetchingActionType | ToggleFollowingProgress\r\n    | FakeType\r\n\r\ntype FakeType = {\r\n    type: typeof FAKE,\r\n    fake: number\r\n}\r\n\r\ntype FollowActionType = {\r\n    type: typeof FOLLOW\r\n    userId: number\r\n}\r\ntype UnfollowActionType = {\r\n    type: typeof UNFOLLOW\r\n    userId: number\r\n}\r\ntype SetUsersActionType = {\r\n    type: typeof SET_USERS\r\n    users: Array<UsersPropType>\r\n}\r\ntype SetCurrentPageActionType = {\r\n    type: typeof SET_CURRENT_PAGE\r\n    currentPage: number\r\n}\r\ntype SetTotalUsersCountActionType = {\r\n    type: typeof SET_TOTAL_USERS_COUNT\r\n    totalUsersCount: number\r\n}\r\ntype ToggleIsFetchingActionType = {\r\n    type: typeof TOGGLE_IS_FETCHING\r\n    isFetching: boolean\r\n}\r\ntype ToggleFollowingProgress = {\r\n    type: typeof TOGGLE_IS_FOLLOWING_PROGRESS\r\n    isFetching: boolean\r\n    userId: number\r\n}\r\n\r\nexport const followSuccess = (userId: number): FollowActionType => ({type: FOLLOW, userId} as const)\r\nexport const unfollowSuccess = (userId: number): UnfollowActionType => ({type: UNFOLLOW, userId} as const)\r\nexport const setUsers = (users: Array<UsersPropType>): SetUsersActionType => ({type: SET_USERS, users} as const)\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageActionType => ({\r\n    type: SET_CURRENT_PAGE,\r\n    currentPage\r\n} as const)\r\nexport const setTotalUsersCount = (totalUsersCount: number): SetTotalUsersCountActionType => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    totalUsersCount\r\n} as const)\r\nexport const toggleIsFetching = (isFetching: boolean): ToggleIsFetchingActionType => ({\r\n    type: TOGGLE_IS_FETCHING,\r\n    isFetching\r\n} as const)\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number): ToggleFollowingProgress => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching,\r\n    userId\r\n} as const)\r\n\r\n\r\nexport const requestUsers = (page: number, pageSize: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFetching(true));\r\n        dispatch(setCurrentPage(page));\r\n\r\n        usersAPI.getUsers(page, pageSize)\r\n            .then(data => {\r\n                dispatch(toggleIsFetching(false));\r\n                dispatch(setUsers(data.items));\r\n                dispatch(setTotalUsersCount(data.totalCount));\r\n            });\r\n    }\r\n}\r\n\r\nconst followUnfollow = async (dispatch: Dispatch, userId: number, apiMethod: any, actionCreator: any) => {\r\n    dispatch(toggleFollowingProgress(true, userId));\r\n    let response = await apiMethod(userId)\r\n    if (response.data.resultCode == 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        let apiMethod = usersAPI.follow.bind(usersAPI);\r\n        let actionCreator = followSuccess;\r\n        followUnfollow(dispatch, userId, apiMethod, actionCreator)\r\n\r\n        // dispatch(toggleFollowingProgress(true, userId));\r\n        // let response = await apiMethod(userId)\r\n        //         if (response.data.resultCode == 0) {\r\n        //             dispatch(actionCreator(userId))\r\n        //         }\r\n        //         dispatch(toggleFollowingProgress(false, userId));\r\n    }\r\n}\r\nexport const unfollow = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        followUnfollow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess)\r\n\r\n        // dispatch(toggleFollowingProgress(true, userId));\r\n        // let response = await apiMethod(userId)\r\n        //         if (response.data.resultCode == 0) {\r\n        //             dispatch(actionCreator(userId))\r\n        //         }\r\n        //         dispatch(toggleFollowingProgress(false, userId));\r\n    }\r\n}\r\n\r\nexport default usersReducer;","import React, {useState} from 'react';\r\nimport styles from '../Paginator/Paginator.module.css';\r\n\r\ntype PaginatorType = {\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage?: number\r\n    portionSize?: number\r\n    onPageChanged: (pageNumber: number) => void\r\n}\r\n\r\nexport const Paginator = (props: PaginatorType) => {\r\n    const {pageSize, totalUsersCount, currentPage, onPageChanged, portionSize = 10} = props\r\n\r\n    let pagesCount = Math.ceil(totalUsersCount / pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    const nameClass = (p: number) => currentPage === p ? `${styles.pageNumber}  ${styles.selectedPage}` : styles.pageNumber\r\n\r\n    return (\r\n        <div className={styles.paginator}>\r\n\r\n            {(portionNumber > 1) ?\r\n                <span>\r\n                    <button onClick={() => setPortionNumber(1)}>to start</button>\r\n                    <button onClick={() => setPortionNumber(portionNumber - 1)}>PREV</button>\r\n                </span>\r\n                : ''\r\n            }\r\n\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map((p) => {\r\n                    return <span className={nameClass(p)}\r\n                                 key={p}\r\n                                 onClick={(e) => {\r\n                                     onPageChanged(p);\r\n                                 }}>{p}</span>\r\n                })}\r\n            {portionCount > portionNumber\r\n                ? <span>\r\n                    <button className={styles.paginator_btn}\r\n                            onClick={() => setPortionNumber(portionNumber + 1)}>NEXT</button>\r\n                  <button onClick={() => setPortionNumber(portionCount)}>to end</button>\r\n                </span>\r\n                : ''\r\n            }\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport styles from \"./Users.module.css\";\r\nimport usersPhoto from \"../../assets/images/user.png\";\r\nimport {UsersPropType} from \"../../redux/users-reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Paginator} from \"../common/Paginator/Paginator\";\r\n\r\n\r\nexport type UsersType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: Array<UsersPropType>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    toggleFollowingProgress: (isFetching: boolean, id: number) => void\r\n    followingInProgress: Array<any>\r\n\r\n}\r\n\r\nlet Users = (props: UsersType) => {\r\n\r\n    const {pageSize, totalUsersCount, currentPage, onPageChanged} = props;\r\n\r\n    return <div>\r\n        <div>\r\n\r\n            <Paginator currentPage={currentPage} onPageChanged={onPageChanged}\r\n                       pageSize={pageSize} totalUsersCount={totalUsersCount} portionSize={5}\r\n            />\r\n\r\n        </div>\r\n        {\r\n            props.users.map(u => <div key={u.id}>\r\n                    <span>\r\n                        <div>\r\n                            <NavLink to={'/profile/' + u.id}>\r\n                            <img src={u.photos.small != null ? u.photos.small : usersPhoto}\r\n                                 className={styles.userPhoto}/>\r\n                                 </NavLink>\r\n                        </div>\r\n                        <div>\r\n                            {u.followed\r\n                                ? <button disabled={props.followingInProgress\r\n                                    .some(id => id === u.id)}\r\n                                          onClick={() => {props.unfollow(u.id)}}>\r\n                                    Unfollow</button>\r\n\r\n                                : <button disabled={props.followingInProgress\r\n                                    .some(id => id === u.id)}\r\n                                          onClick={() => {props.follow(u.id)}}>\r\n                                    Follow</button>\r\n                            }\r\n                                </div>\r\n                                </span>\r\n                <span>\r\n                                <div>{u.name}</div>\r\n                                <div>{u.status}</div>\r\n                                </span>\r\n                <span>\r\n                                <div>{\"u.location.country\"}</div>\r\n                                <div>{\"u.location.city\"}</div>\r\n                                </span>\r\n            </div>)\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default Users;","import {AppStateType} from \"./redux-store\";\r\nimport {createSelector} from \"reselect\";\r\n\r\n\r\nexport const getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users;\r\n}\r\n\r\n\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n    return users.filter(u => true);\r\n})\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    setCurrentPage,\r\n    toggleFollowingProgress,\r\n    requestUsers, follow, unfollow\r\n} from \"../../redux/users-reducer\";\r\nimport {UsersPropType} from \"../../redux/users-reducer\";\r\n//import Users from \"./UsersAPIComponent\";\r\n//import UsersAPIComponent from \"./UsersAPIComponent\";\r\nimport axios from \"axios\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport { usersAPI} from \"../../api/api\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n} from \"../../redux/users-selectors\";\r\n\r\n\r\ntype MapStateType = {\r\n    users: Array<UsersPropType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<any>\r\n}\r\n\r\ntype MapDispatchType = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n   // setUsers: (users: Array<UsersPropType>) => void\r\n    setCurrentPage: (pageNumber: number) => void\r\n   // setTotalUsersCount: (totalUsersCount: number) => void\r\n   // toggleIsFetching: (isFetching: boolean) => void\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\ntype PropsType = MapDispatchType & MapStateType\r\n\r\nclass UsersContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n\r\n        this.props.getUsers(pageNumber, this.props.pageSize)\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n       // console.log(\"Render\")\r\n\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   onPageChanged={this.onPageChanged}\r\n                   users={this.props.users}\r\n                   follow={this.props.follow}\r\n                   unfollow={this.props.unfollow}\r\n                   followingInProgress={this.props.followingInProgress}\r\n                  toggleFollowingProgress={this.props.toggleFollowingProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\n\r\n// const mapStateToProps = (state: AppStateType): MapStateType => {\r\n//     return {\r\n//         users: state.usersPage.users,\r\n//         pageSize: state.usersPage.pageSize,\r\n//         totalUsersCount: state.usersPage.totalUsersCount,\r\n//         currentPage: state.usersPage.currentPage,\r\n//         isFetching: state.usersPage.isFetching,\r\n//         followingInProgress: state.usersPage.followingInProgress\r\n//     }\r\n// }\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateType => {\r\n\r\n    // console.log('mapStateToProps USERS')\r\n\r\n    return {\r\n        //users: getUsersSuperSelector(state),\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n  //  withAuthRedirect,\r\n    connect<MapStateType, MapDispatchType, {}, AppStateType>(mapStateToProps, {\r\n        follow,\r\n        unfollow,\r\n        setCurrentPage,\r\n        toggleFollowingProgress,\r\n        getUsers: requestUsers\r\n    })\r\n)(UsersContainer)","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype HeaderType = {\r\n    login: string | null\r\n    isAuth: boolean\r\n    logout: () => void\r\n}\r\n\r\nconst Header = (props: HeaderType) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img\r\n                src='https://www.epicentrofestival.com/wp-content/uploads/2019/12/zen-buddhism-drawing-circle-logo-hd-hakuinampaposs-circle-circle-of-life-chine-720x736.jpg'/>\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth ? <div>{props.login} - <button onClick={props.logout}>Log out</button></div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import {InferActionsTypes} from \"./redux-store\";\r\nimport {authAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_AUTH_USER_DATA = 'SET-AUTH-USER-DATA';\r\n\r\nlet initialState = {\r\n   // id: null as (number | null),\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    userId: null as (string | null)\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n//type ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\nconst authReducer = (state = initialState, action: SetAuthUserData): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case SET_AUTH_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype SetAuthUserData = {\r\n    type: typeof SET_AUTH_USER_DATA\r\n    payload: any\r\n}\r\n\r\nexport const setAuthUserData = (userId: string | null, email: string | null, login: string | null, isAuth: boolean): SetAuthUserData => ({\r\n    type: SET_AUTH_USER_DATA, payload: {userId, email, login, isAuth}\r\n} as const)\r\n\r\n\r\nexport const getAuthUserData = () => async (dispatch: Dispatch) => {\r\n       let response =  await authAPI.me();\r\n                if (response.data.resultCode === 0) {\r\n                    let {id, email, login} = response.data.data\r\n                    dispatch(setAuthUserData(id, email, login, true));\r\n                }\r\n\r\n}\r\nexport const login = (email: string, password: string, rememberMe: boolean) => async (dispatch: Dispatch<any>) => {\r\n     let response = await authAPI.login(email, password, rememberMe);\r\n                if (response.data.resultCode === 0) {\r\n                   dispatch(getAuthUserData())\r\n                } else {\r\n                   let message = response.data.messages.length > 0\r\n                       ? response.data.messages[0]\r\n                       : \"Some error\";\r\n                    dispatch(stopSubmit(\"login\", {_error: message}));\r\n                }\r\n}\r\n\r\nexport const logout = () => (dispatch: Dispatch<any>) => {\r\n    authAPI.logout()\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setAuthUserData(null, null, null, false))\r\n            }\r\n        });\r\n}\r\n\r\n//type ActionType = ReturnType<typeof setAuthUserData>\r\n\r\nexport default authReducer;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport { logout} from \"../../redux/auth-reducer\";\r\n\r\ntype MapStateType = {\r\n    login: string | null\r\n    isAuth: boolean\r\n\r\n}\r\ntype MapDispatchType = {\r\n    //getAuthUserData: () => void\r\n    logout: () => void\r\n}\r\ntype PropsType = MapStateType & MapDispatchType\r\n\r\nclass HeaderContainer extends React.Component<PropsType> {\r\n    // componentDidMount() {\r\n    //     this.props.getAuthUserData();\r\n    // }\r\n\r\n    render() {\r\n        return <Header\r\n            login={this.props.login}\r\n            isAuth={this.props.isAuth}\r\n            logout={this.props.logout}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login\r\n    }\r\n}\r\n\r\nexport default connect<MapStateType, MapDispatchType, {}, AppStateType>(mapStateToProps, {\r\n   // getAuthUserData,\r\n    logout\r\n})(HeaderContainer);","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport style from \"./../common/FormsControls/FormsControls.module.css\"\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field placeholder={\"Email\"} name={\"email\"}\r\n                       validate={[required]}\r\n                       component={Input}/>\r\n            </div>\r\n            <div>\r\n                <Field placeholder={\"Password\"} name={\"password\"} type={\"password\"}\r\n                       validate={[required]}\r\n                       component={Input}/>\r\n            </div>\r\n            <div>\r\n                <Field component={Input} name={\"rememberMe\"} type={\"checkbox\"}/> remember me\r\n            </div>\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\r\n\r\nconst Login = (props: any) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit}/>\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login);","\r\nimport {Dispatch} from \"redux\";\r\nimport {getAuthUserData} from \"./auth-reducer\";\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\r\n\r\nlet initialState = {\r\n   initialized: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst appReducer = (state = initialState, action: initializedType): InitialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype initializedType = {\r\n    type: typeof INITIALIZED_SUCCESS\r\n}\r\n\r\nexport const initializedSuccess = (): initializedType => ({type: INITIALIZED_SUCCESS} as const)\r\n\r\n\r\n// export const initializeApp = () => (dispatch: Dispatch<any>) => {\r\n//                 let promise =  dispatch(getAuthUserData());\r\n//                 Promise.all([promise])\r\n//                     .then(() => {\r\n//                     dispatch(initializedSuccess());\r\n//                })\r\n// }\r\n\r\nexport const initializeApp = () => async (dispatch: Dispatch<any>) => {\r\n    await dispatch(getAuthUserData());\r\n    dispatch(initializedSuccess());\r\n};\r\n\r\nexport default appReducer;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport appReducer from \"./app-reducer\";\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n});\r\n\r\n// const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n// let store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware))); //91\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\ntype RootReducersType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducersType>;\r\n\r\n// type PropertiesTypes<T> = T extends { [key: string]: infer U } ? U : never\r\n// export type InferActionsTypes<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesTypes<T>>\r\n\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\n\r\nexport default store;","import React from 'react';\nimport './App.css';\nimport { HashRouter, Route, Switch, withRouter} from 'react-router-dom';\nimport Navbar from \"./components/Navbar/Navbar\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport Login from \"./components/Login/Login\";\nimport {connect, Provider} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {initializeApp} from \"./redux/app-reducer\";\nimport store, {AppStateType} from \"./redux/redux-store\";\nimport Preloader from \"./components/common/Preloader/Preloader\";\nimport {withSuspense} from \"./hoc/withSuspense\";\n\n//import DialogsContainer from \"./components/Dialogs/DialogsContainer\";\n//import ProfileContainer from \"./components/Profile/ProfileContainer\";\n\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\n\ntype MDTPType = {\n    initializeApp: () => void\n}\ntype MSTPType = {\n    initialized: boolean\n}\n\nclass App extends React.Component<MSTPType & MDTPType> {\n\n    componentDidMount() {\n        this.props.initializeApp();\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        return (\n            <div className='app-wrapper'>\n                <HeaderContainer/>\n                <Navbar/>\n                <div className='app-wrapper-content'>\n                    <Switch>\n                        <Route path='/dialogs'\n                               render={() => {\n                                   return <React.Suspense fallback={<div>Loading...</div>}>\n                                       <DialogsContainer/>\n                                   </React.Suspense>\n                               }}/>\n\n                        <Route path='/profile/:userId?'\n                               render={withSuspense(ProfileContainer)}/>\n\n                        <Route path='/users' render={() => <UsersContainer/>}/>\n\n                        <Route path='/login' render={() => <Login/>}/>\n                    </Switch>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n    initialized: state.app.initialized\n})\n\nlet AppContainer = compose<any>(\n    withRouter,\n    connect(mapStateToProps, {initializeApp}))(App) as React.ComponentClass;\n\nconst SamuraiTSApp = () => {\n    return <HashRouter>\n    {/*return <BrowserRouter basename={process.env.PUBLIC_URL}>*/}\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </HashRouter>\n}\n\nexport default SamuraiTSApp;","import React from \"react\";\r\n\r\n\r\nexport const withSuspense = (Component: any) => {\r\n\r\n    return (props: any) => {\r\n        return <React.Suspense fallback={<div>Loading...</div>} >\r\n        <Component {...props} />\r\n        </React.Suspense>\r\n     };\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//import store from './redux/redux-store';\n//import {BrowserRouter} from \"react-router-dom\";\n//import {Provider} from \"react-redux\";\nimport SamuraiTSApp from \"./App\";\n\nlet h1 = document.createElement(\"h1\");\nh1.innerHTML = 'Hello';\n//@ts-ignore\ndocument.querySelector('body')\n    .appendChild(h1);\n\nReact.createElement('h1', [React.createElement(App)])\n\n// setInterval(() => {\n//     store.dispatch({type: \"FAKE\"})\n// }, 1000);\n\nReactDOM.render(<SamuraiTSApp/>, document.getElementById('root'));\n\n\n/*    ReactDOM.render(\n        <BrowserRouter>\n            <App appState={state}\n                 addPost={addPost}\n/>\n        </BrowserRouter>, document.getElementById('root'));\n}*/\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__fPHY-\",\"error\":\"FormsControls_error__2JZrf\",\"formSummaryError\":\"FormsControls_formSummaryError__2_YFN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__3r4sg\",\"pageNumber\":\"Paginator_pageNumber__3IApo\",\"selectedPage\":\"Paginator_selectedPage__1LjfB\",\"paginator_btn\":\"Paginator_paginator_btn__Qkhmh\"};","import React from \"react\";\r\nimport preloader from \"../../../assets/images/preloader.svg\";\r\n\r\n\r\nlet Preloader = () => {\r\n    return (\r\n        <div>\r\n            <img src={preloader}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader;","import React from \"react\";\r\nimport {WrappedFieldProps} from \"redux-form\";\r\nimport styles from \"./FormsControls.module.css\"\r\n\r\n// const FormControl: React.FC<WrappedFieldProps> = (input, meta, child, ...props) => {\r\n//     const hasError = meta.touched && meta.error;\r\n//\r\n//     return (\r\n//         <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n//             <div>\r\n//                 {props.children}\r\n//             </div>\r\n//             {hasError && <span>{meta.error}</span>}\r\n//         </div>\r\n//     )\r\n// }\r\n//\r\n// export const TextArea: React.FC<WrappedFieldProps> = (props) => {\r\n//     const {input, meta, child, ...restProps} = props;\r\n//     return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n// }\r\n// export const Input: React.FC<WrappedFieldProps> = (props) => {\r\n//     const {input, meta, child, ...restProps} = props;\r\n//     return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n// }\r\n\r\n\r\nexport const TextArea: React.FC<WrappedFieldProps> = ({input, meta, ...props}) => {\r\n\r\n    const hasError = meta.touched && meta.error;\r\n\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n            <textarea {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = ({input, meta, ...props}) => {\r\n\r\n    const hasError = meta.touched && meta.error;\r\n\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                <input {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}","\r\ntype RequiredFieldType = {\r\n    value: string\r\n    length: number\r\n}\r\n\r\n\r\n\r\nexport const required = (value: RequiredFieldType) => {\r\n    if(value) return undefined;\r\n    return 'Field is required'\r\n}\r\n\r\n\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: RequiredFieldType) => {\r\n    if(value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__JC3Hd\",\"loginBlock\":\"Header_loginBlock__2LWjY\"};","import {InferActionsTypes} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst SET_USER_PROFILE = 'SET-USER-PROFILE';\r\nconst SET_STATUS = 'SET-STATUS'\r\nconst DELETE_POST = 'DELETE-POST'\r\nconst UPDATE_PHOTO = 'UPDATE_PHOTO'\r\n\r\n// export type ProfilePropType = {\r\n//     userId: number\r\n//     lookingForAJob: boolean\r\n//     lookingForAJobDescription: string\r\n//     fullName: string\r\n//     contacts: {\r\n//         github: string\r\n//         website: string\r\n//     }\r\n//     photos: {\r\n//         small: string\r\n//         large: string\r\n//     }\r\n// }\r\n\r\nexport type UserProfilePhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type PostDataType = {\r\n    id: string\r\n    message: string\r\n    likes: number\r\n}\r\nexport type contactsType = {\r\n    facebook: string\r\n    website: string\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    youtube: string\r\n    github: string\r\n    mainLink: string\r\n}\r\n\r\nexport type UserProfileType = {\r\n    aboutMe: string\r\n    contacts: contactsType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: UserProfilePhotosType\r\n}\r\n\r\nexport type PostsPropType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi how are you?', likesCount: 12},\r\n        {id: 2, message: 'It\\'s my first post', likesCount: 10},\r\n        {id: 3, message: 'Bla', likesCount: 11},\r\n        {id: 4, message: 'Dada', likesCount: 14}\r\n    ] as Array<PostsPropType>,\r\n    profile: null as null | UserProfileType,\r\n    status: \"\"\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n//type ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: new Date().getTime(),\r\n                message: action.message,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n               // newPostText: '',\r\n                posts: [newPost, ...state.posts]\r\n            }\r\n        }\r\n\r\n        case SET_STATUS: {\r\n            return {...state, status: action.status}\r\n        }\r\n\r\n        case SET_USER_PROFILE: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case DELETE_POST: {\r\n            return {...state, posts: state.posts.filter(p => p.id != action.postId)}\r\n        }\r\n        case UPDATE_PHOTO: {\r\n            return {...state, profile: {...state.profile, photos: action.photos} as UserProfileType}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n    return state;\r\n}\r\ntype ActionsType = AddPostActionCreatorType | SetUserProfileACType | SetStatusActionType | DeletePostStatus | UpdatePhotoType\r\n\r\ntype AddPostActionCreatorType = {\r\n    type: typeof ADD_POST\r\n    message: string\r\n}\r\n\r\ntype SetUserProfileACType = {\r\n    type: typeof SET_USER_PROFILE\r\n    profile: UserProfileType\r\n}\r\ntype SetStatusActionType = {\r\n    type: typeof SET_STATUS\r\n    status: string\r\n}\r\ntype DeletePostStatus = {\r\n    type: typeof DELETE_POST\r\n    postId: number\r\n}\r\ntype UpdatePhotoType = {\r\n    type: typeof UPDATE_PHOTO\r\n    photos: UserProfilePhotosType\r\n}\r\n\r\nexport const addPost = (message: string): AddPostActionCreatorType => ({type: ADD_POST, message} as const)\r\n//export const updateNewPostText = (newText: string): UpdateNewPostTextActionCreatorType => ({type: UPDATE_NEW_POST_TEXT, newText} as const)\r\nexport const setUserProfile = (profile: UserProfileType): SetUserProfileACType => ({type: SET_USER_PROFILE, profile} as const)\r\nexport const setStatus = (status: string): SetStatusActionType => ({type: SET_STATUS, status} as const)\r\nexport const deletePost = (postId: number): any => ({type: DELETE_POST, postId} as const)\r\nexport const updatePhotoAC = (photos: UserProfilePhotosType) => ({ type: UPDATE_PHOTO, photos } as const)\r\n\r\n\r\nexport const getUserProfile = (userId: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        usersAPI.getProfile(userId)\r\n            .then(response => {\r\n                dispatch(setUserProfile(response.data));\r\n            });\r\n    }\r\n}\r\nexport const getStatus = (userId: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.getStatus(userId)\r\n            .then(response => {\r\n                dispatch(setStatus(response.data));\r\n            });\r\n    }\r\n}\r\nexport const updateStatus = (status: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.updateStatus(status)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(setStatus(status));\r\n                }\r\n            });\r\n    }\r\n}\r\nexport const updatePhoto = (file: File) => async (dispatch: Dispatch) => {\r\n    let response = await profileAPI.updatePhoto(file)\r\n    if (response.resultCode === 0) {\r\n        dispatch(updatePhotoAC(response.data.photos))\r\n    }\r\n}\r\n\r\nexport default profileReducer;"],"sourceRoot":""}